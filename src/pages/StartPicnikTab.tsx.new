import { useState, useEffect } from 'react';
import { useTheme } from '../App';
import { getWeatherData, getPicnicRecommendation } from '../services/weatherService';

interface WeatherData {
  emoji: string;
  message: string;
  temp: number;
  condition: string;
}

export function StartPicnikTab() {
  useTheme();
  const [weather, setWeather] = useState<WeatherData | null>(null);
  const [loading, setLoading] = useState(true);
  const [location, setLocation] = useState<{lat: number; lng: number} | null>(null);
  const [error, setError] = useState<string | null>(null);

  const fetchWeather = async (lat: number, lng: number) => {
    try {
      setLoading(true);
      const weatherData = await getWeatherData(lat, lng);
      const recommendation = getPicnicRecommendation(weatherData);
      
      setWeather({
        emoji: recommendation.emoji,
        message: recommendation.message,
        temp: Math.round(weatherData.current.temp),
        condition: weatherData.current.weather[0].main
      });
      setError(null);
    } catch (err) {
      console.error('Error fetching weather:', err);
      setError('Failed to load weather data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const fetchLocationAndWeather = async () => {
      setLoading(true);
      setError(null);

      try {
        if (!navigator.geolocation) {
          throw new Error('Geolocation is not supported by your browser');
        }

        const position = await new Promise<GeolocationPosition>((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(resolve, reject, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
          });
        });

        const { latitude, longitude } = position.coords;
        const newLocation = { lat: latitude, lng: longitude };
        setLocation(newLocation);
        await fetchWeather(latitude, longitude);
      } catch (err) {
        console.error('Error:', err);
        setError('Unable to retrieve your location. Using default location.');
        // Default to San Francisco if location access is denied
        await fetchWeather(37.7749, -122.4194);
      }
    };

    fetchLocationAndWeather();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-gray-900 dark:text-white">Welcome to Picnik</h1>
      
      {/* Weather Widget */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-6">
        <h2 className="text-2xl font-semibold mb-4 text-gray-900 dark:text-white">Current Weather</h2>
        {weather ? (
          <div className="flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0">
            <div className="text-8xl">{weather.emoji}</div>
            <div className="text-center md:text-left">
              <p className="text-5xl font-bold">{weather.temp}Â°F</p>
              <p className="text-xl text-gray-600 dark:text-gray-300 capitalize">{weather.condition.toLowerCase()}</p>
            </div>
            <div className="text-center md:text-right">
              <p className="text-lg text-gray-700 dark:text-gray-200">{weather.message}</p>
              {location && (
                <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                  Your location: {location.lat.toFixed(4)}, {location.lng.toFixed(4)}
                </p>
              )}
            </div>
          </div>
        ) : (
          <p className="text-red-500">{error || 'Weather data not available'}</p>
        )}
      </div>
    </div>
  );
}
